{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatgptService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.openai.com/v1/chat/completions';\n    this.token = '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';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.token\n      })\n    };\n  }\n  getQuestion(data) {\n    return this.http.post(this.apiUrl, data, this.httpOptions);\n  }\n  static #_ = this.ɵfac = function ChatgptService_Factory(t) {\n    return new (t || ChatgptService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatgptService,\n    factory: ChatgptService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAK9D,OAAM,MAAOC,cAAc;EAWzBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAXN,WAAM,GAAG,4CAA4C;IACrD,UAAK,GAAG,qDAAqD;IAE7D,gBAAW,GAAG;MACpBC,OAAO,EAAE,IAAIJ,WAAW,CAAC;QACvB,cAAc,EAAG,kBAAkB;QACnC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACK;OACnC;KACF;EAIG;EAEJC,WAAW,CAACC,IAAU;IACpB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,IAAI,CAACC,MAAM,EAAEF,IAAI,EAAE,IAAI,CAACG,WAAW,CAAC;EAC5D;EAAC;qBAjBUT,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAU,SAAdV,cAAc;IAAAW,YAFb;EAAM","names":["HttpHeaders","ChatgptService","constructor","http","headers","token","getQuestion","data","post","apiUrl","httpOptions","factory","providedIn"],"sourceRoot":"","sources":["/Users/denys/Coding/hackaton-current/hackaton/src/app/services/chatgpt.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatgptService {\n  private apiUrl = 'https://api.openai.com/v1/chat/completions'; \n  private token = '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';\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type':  'application/json',\n      'Authorization': 'Bearer ' + this.token,\n    })\n  };\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  getQuestion(data?: any) {\n    return this.http.post(this.apiUrl, data, this.httpOptions);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}